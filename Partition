/*
 * Partition
 * 
 * Given an array, and a pivotIndex. Rearrange the array so that the numbers
 * smaller than array[pivotIndex] are on the left side of array[pivotIndex] 
 * and numbers larger than array[pivotIndex] are on the right side of array[pivotIndex].
 *
 * Assumption:
 * The array is not null or empty. pivotIndex is within the boundary of the array.
 *
 * Example:
 * array = {9,4,6,2,0,1,7}
 * pivotIndex = 2
 *
 * Result: {1, 4, 0, 2, 6, 9, 7} 
 *
 */
 

/* 
 * 
 * 
 */

class Solution {
	public void partition(int[] array, int pivotIndex) {
		int lastIndex = array.length - 1;
		swap(array, pivotIndex, lastIndex);

		int l = 0; // 自己定義兩指針l、r
		int r = array.length - 2;
		
		while (l <= r) {
			if (array[l] < array[lastIndex]) {
				l++;
			} else { // array[l] >= array[lastIndex]
				swap(array, l ,r);
				r--;
			}
		}
		
		// post processing
		swap(array, l, lastIndex);
	}
	
	private void swap(int[] array, int indexOne, int indexTwo) {
		int temp = array[indexOne];
		array[indexOne] = array[indexTwo];
		array[indexTwo] = temp;
	}
}


























