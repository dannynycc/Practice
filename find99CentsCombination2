package find99CentsCombination2;
import java.util.*;

public class Solution {
  public static void main(String[] args) {
    Solution sol = new Solution();
    int target = 99;
    int[] coins = {25, 10, 5, 1}; // given coin list
    List<List<Integer>> result = sol.combinations(target, coins);
    System.out.println(result);
  }

  public List<List<Integer>> combinations(int target, int[] coins) {
    // Use DFS, 4 levels, dynamic branching factor
    int level = 0;
    List<Integer> cur = new ArrayList<>();
    List<List<Integer>> result = new ArrayList<>();
    combinations(target, coins, level, cur, result);
    //combinations(target = 99, 
    //             coins = {25, 10, 5, 1}, 
    //             level = 0, 
    //             cur = {0, 0, 0, 0}
    //            );
    return result;
  }
  
  // function overloading
  private void combinations(int moneyLeft, int[] coins, int level, List<Integer> cur, List<List<Integer>> result) {
    // base case
    if (level == coins.length - 1) {
      if (moneyLeft % coins[coins.length - 1] == 0) {
        cur.add(moneyLeft / (coins[coins.length - 1]));
        result.add(new ArrayList<Integer>(cur)); // 注意這一行不能只寫result.add(cur);
        cur.remove(cur.size() - 1); // 恢復上一動
      }
      return;
    }
    
    // i 表示當前level取了幾個coins
    for (int i = 0; i * coins[level] <= moneyLeft; i++) {
      cur.add(i); // update current coins的組合, 要繼續傳向下一層
      combinations(moneyLeft - i * coins[level], coins, level + 1, cur, result);
      cur.remove(cur.size() - 1);
    }
  }
}
