/*
 * ReOrder Linked List
 * 
 * Reorder the given singly-linked list 
 * N1 -> N2 -> N3 -> N4 -> … -> Nn -> null to be 
 * N1- > Nn -> N2 -> Nn-1 -> N3 -> Nn-2 -> … -> null
 *
 * Examples
 * L = null, is reordered to null
 * L = 1 -> null, is reordered to 1 -> null
 * L = 1 -> 2 -> 3 -> 4 -> null, is reordered to 1 -> 4 -> 2 -> 3 -> null
 * L = 1 -> 2 -> 3 -> null, is reordred to 1 -> 3 -> 2 -> null
 *
 */
 

/* 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */



public class Solution {
	public ListNode reorder(ListNode head) {
		
		// Partition list into two halfs
		ListNode middle = findMiddle(head);
		ListNode secondHalfHead = middle.next;
		middle.next = null;

		// Reverse second half list
		ListNode reversedHead = reverseLinkedList(secondHalfHead);

		// 一邊取一個
		// head: 1->2->3->null
		//		          i 
		//		          iN		
		// reversedHead: 6->5->4->null
		//						          j 
		//					            jN
		ListNode i = head;
		ListNode iNext = head;
		ListNode j = reversedHead;
		ListNode jNext = reversedHead;
		ListNode dummyHead = new ListNode(0);
		dummyHead.next = i;
		while (i != null && j!= null) {
			iNext = i.next;
			jNext = j.next;
			i.next = j;
			i = iNext;
			j.next = iNext;
			j = jNext;
		}
		return dummyHead.next;
	}
	
	private ListNode findMiddle(ListNode head) {
		ListNode slow = head;
		ListNode fast = head;
		while (fast.next != null && fast.next.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
    // 此時slow為中點
		return slow;
	}

	private ListNode reverseLinkedList(ListNode head) {
		ListNode curr = head;
		ListNode next = head;
		ListNode prev = null;
		while (curr != null) {
			next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
		}
		return prev;
	}

}











