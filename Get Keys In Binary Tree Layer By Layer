/*
 * Get Keys In Binary Tree Layer By Layer
 * 
 * Get the list of list of keys in a given binary tree layer by layer. Each layer is 
 * represented by a list of keys and the keys are traversed from left to right.
 * Example:
 *
 *        5
 *       / \
 *      3   8
 *     / \   \
 *    1   4   11
 *  
 * the result is [ [5], [3, 8], [1, 4, 11] ]
 * 
 * Corner Cases:
 * What if the binary tree is null? Return an empty list of list in this case.
 * 
 */

public class TreeNode {
  public int key;
  public TreeNode left;
  public TreeNode right;
  public TreeNode(int key) {
    this.key = key;
  }
}

public class Solution {
  public List<List<Integer>> layerByLayer(TreeNode root) {
		// 建一個 return type 為 List<List<Integer>> 的 2D ArrayList
		List<List<Integer>> outerList = new ArrayList<List<Integer>>();

    // corner case
		if (root == null) {
			return outerList;
		}
		
		Queue<TreeNode> q = new LinkedList<>();
		q.offer(root);
		
		while (!q.isEmpty()) {
			// 每一層的元素都放到它各自的level(也就存到innerList)
			List<Integer> innerList = new ArrayList<>();
			outerList.add(innerList);
			int curLevelSize = q.size();
			
			for (int i = 0; i < curLevelSize; i++) {
				TreeNode cur = q.poll();
				innerList.add(cur.key);
				if (cur.left != null) {
					q.offer(cur.left);
				}
				if (cur.right != null) {
					q.offer(cur.right);
				}
			}
		}
		return outerList;
  }
}



























